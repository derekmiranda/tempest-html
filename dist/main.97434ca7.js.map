{"version":3,"sources":["lib/matrix.ts","CONSTS.ts","objects/Transform.ts","objects/BaseGameObject.ts","lib/shapes.ts","lib/utils.ts","objects/Bullet.ts","objects/Player.ts","Game.ts","lib/Queue.ts","objects/Enemy.ts","objects/RedEnemy.ts","objects/EnemySpawner.ts","objects/Level.ts","objects/Circle.ts","objects/Square.ts","main.ts"],"names":[],"mappings":"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","file":"main.97434ca7.js","sourceRoot":"../src","sourcesContent":["// borrowed from https://webglfundamentals.org/webgl/lessons/webgl-2d-matrices.html\n\n// TODO: convert to TS/ES6 module\nexport var matrix = {\n  projection: function (width, height) {\n    // Note: This matrix flips the Y axis so that 0 is at the top.\n    return [2 / width, 0, 0, 0, -2 / height, 0, -1, 1, 1];\n  },\n\n  identity: function () {\n    return [1, 0, 0, 0, 1, 0, 0, 0, 1];\n  },\n\n  translation: function (tx, ty) {\n    return [1, 0, 0, 0, 1, 0, tx, ty, 1];\n  },\n\n  rotation: function (angleInRadians) {\n    var c = Math.cos(angleInRadians);\n    var s = Math.sin(angleInRadians);\n    return [c, -s, 0, s, c, 0, 0, 0, 1];\n  },\n\n  scaling: function (sx, sy) {\n    return [sx, 0, 0, 0, sy, 0, 0, 0, 1];\n  },\n\n  multiply: function (a, b) {\n    var a00 = a[0 * 3 + 0];\n    var a01 = a[0 * 3 + 1];\n    var a02 = a[0 * 3 + 2];\n    var a10 = a[1 * 3 + 0];\n    var a11 = a[1 * 3 + 1];\n    var a12 = a[1 * 3 + 2];\n    var a20 = a[2 * 3 + 0];\n    var a21 = a[2 * 3 + 1];\n    var a22 = a[2 * 3 + 2];\n    var b00 = b[0 * 3 + 0];\n    var b01 = b[0 * 3 + 1];\n    var b02 = b[0 * 3 + 2];\n    var b10 = b[1 * 3 + 0];\n    var b11 = b[1 * 3 + 1];\n    var b12 = b[1 * 3 + 2];\n    var b20 = b[2 * 3 + 0];\n    var b21 = b[2 * 3 + 1];\n    var b22 = b[2 * 3 + 2];\n\n    a[0] = b00 * a00 + b01 * a10 + b02 * a20;\n    a[1] = b00 * a01 + b01 * a11 + b02 * a21;\n    a[2] = b00 * a02 + b01 * a12 + b02 * a22;\n    a[3] = b10 * a00 + b11 * a10 + b12 * a20;\n    a[4] = b10 * a01 + b11 * a11 + b12 * a21;\n    a[5] = b10 * a02 + b11 * a12 + b12 * a22;\n    a[6] = b20 * a00 + b21 * a10 + b22 * a20;\n    a[7] = b20 * a01 + b21 * a11 + b22 * a21;\n    a[8] = b20 * a02 + b21 * a12 + b22 * a22;\n  },\n\n  cloneMultiply: function (a, b) {\n    var a00 = a[0 * 3 + 0];\n    var a01 = a[0 * 3 + 1];\n    var a02 = a[0 * 3 + 2];\n    var a10 = a[1 * 3 + 0];\n    var a11 = a[1 * 3 + 1];\n    var a12 = a[1 * 3 + 2];\n    var a20 = a[2 * 3 + 0];\n    var a21 = a[2 * 3 + 1];\n    var a22 = a[2 * 3 + 2];\n    var b00 = b[0 * 3 + 0];\n    var b01 = b[0 * 3 + 1];\n    var b02 = b[0 * 3 + 2];\n    var b10 = b[1 * 3 + 0];\n    var b11 = b[1 * 3 + 1];\n    var b12 = b[1 * 3 + 2];\n    var b20 = b[2 * 3 + 0];\n    var b21 = b[2 * 3 + 1];\n    var b22 = b[2 * 3 + 2];\n    return [\n      b00 * a00 + b01 * a10 + b02 * a20,\n      b00 * a01 + b01 * a11 + b02 * a21,\n      b00 * a02 + b01 * a12 + b02 * a22,\n      b10 * a00 + b11 * a10 + b12 * a20,\n      b10 * a01 + b11 * a11 + b12 * a21,\n      b10 * a02 + b11 * a12 + b12 * a22,\n      b20 * a00 + b21 * a10 + b22 * a20,\n      b20 * a01 + b21 * a11 + b22 * a21,\n      b20 * a02 + b21 * a12 + b22 * a22,\n    ];\n  },\n\n  translate: function (m, tx, ty) {\n    return matrix.multiply(m, matrix.translation(tx, ty));\n  },\n\n  rotate: function (m, angleInRadians) {\n    return matrix.multiply(m, matrix.rotation(angleInRadians));\n  },\n\n  scale: function (m, sx, sy) {\n    return matrix.multiply(m, matrix.scaling(sx, sy));\n  },\n\n  transformPoint: function (m, x, y) {\n    const newX = m[0] * x + m[3] * y + m[6];\n    const newY = m[1] * x + m[4] * y + m[7];\n    return {\n      x: newX,\n      y: newY,\n    };\n  },\n\n  deriveAngle: function (m) {\n    // m[1][0] should be sin(angle)\n    return Math.asin(m[3]);\n  },\n};\n","import { Point } from \"./types\";\n\n// 60 fps\nexport const AVG_FRAME_TIME = 1 / 60;\n\n// define geometry as relative to unit square\nexport const LEVEL_CENTER: Point = {\n  x: 0,\n  y: 0.1,\n};\n\n// scale to apply on far level shape\nexport const FAR_SCALE = 0.1;\n\n// padding b/w player and line on level w.r.t. level-space\nexport const PLAYER_TO_LEVEL_DIST = 0;\nexport const PLAYER_TO_LEVEL_SIZE = 0.2;\nexport const ENEMY_TO_LEVEL_SIZE = 0.2;\n\n// z-value tolerance for collisions\nexport const COLLISION_TOLERANCE = 0.03;\n\nexport const COLORS = {\n  BG: \"black\",\n  PLAYER: \"yellow\",\n  BULLET: \"pink\",\n  RED: \"tomato\",\n  LINE: \"blue\",\n};\n\nexport const RED_ENEMY_SPEED = 0.00015;\nexport const BULLET_SPEED = 0.003;\nexport const BULLET_TOLERANCE = 1500 * BULLET_SPEED * AVG_FRAME_TIME;\n\nexport const MAX_ID = Number.MAX_SAFE_INTEGER;\n","import { FAR_SCALE } from \"../CONSTS\";\nimport { matrix } from \"../lib/matrix\";\nimport { Matrix, TransformPropsInterface } from \"../types\";\n\nexport class Transform {\n  private matrix: Matrix = matrix.identity();\n\n  // transform props\n  x: number;\n  y: number;\n  z: number;\n  w: number;\n  h: number;\n  angle: number = 0;\n\n  constructor({\n    x = 0,\n    y = 0,\n    z = 0,\n    w = 1,\n    h = 1,\n    angle = 0,\n  }: TransformPropsInterface = {}) {\n    this.setTransformWithProps({ x, y, z, w, h, angle });\n  }\n\n  getMatrix(): Matrix {\n    return this.matrix;\n  }\n\n  setMatrix(m: Matrix, shouldUpdateProps: boolean = false) {\n    this.matrix = m;\n    if (shouldUpdateProps) {\n      this.updateTransformProps();\n    }\n  }\n\n  setTransformWithProps({\n    x,\n    y,\n    w,\n    z,\n    h,\n    angle,\n  }: TransformPropsInterface): void {\n    const newMat = matrix.identity();\n\n    // apply translation\n    if (x !== undefined) this.x = x;\n    if (y !== undefined) this.y = y;\n    matrix.translate(newMat, this.x, this.y);\n\n    // update z\n    if (z !== undefined) this.z = z;\n\n    // apply rotation\n    if (angle !== undefined) this.angle = angle;\n    if (this.angle >= Math.PI * 2) {\n      this.angle = (this.angle / (Math.PI * 2)) % 1;\n    }\n    matrix.rotate(newMat, this.angle);\n\n    // apply scale with z-scaling\n    const zScale = 1 - (1 - FAR_SCALE) * this.z;\n    if (w !== undefined) this.w = w;\n    if (h !== undefined) this.h = h;\n    matrix.scale(newMat, this.w * zScale, this.h * zScale);\n\n    this.matrix = newMat;\n  }\n\n  getTransformProps() {\n    return {\n      x: this.x,\n      y: this.y,\n      z: this.z,\n      w: this.w,\n      h: this.h,\n      angle: this.angle,\n    };\n  }\n\n  updateWithProps({ x, y, w, z, h, angle }: TransformPropsInterface): void {\n    // apply translation\n    if (x || y) {\n      // cache xy\n      if (x !== undefined) this.x += x;\n      if (y !== undefined) this.y += y;\n\n      matrix.translate(this.matrix, this.x, this.y);\n    }\n\n    // apply rotation\n    if (angle !== undefined) {\n      // cache angle\n      this.angle += angle;\n      if (this.angle >= Math.PI * 2) {\n        this.angle = (this.angle / (Math.PI * 2)) % 1;\n      }\n      matrix.rotate(this.matrix, angle);\n    }\n\n    // apply z\n    if (z !== undefined) this.z += z;\n\n    // apply scale and z\n    if (w || h) {\n      if (w !== undefined) this.w *= w;\n      if (h !== undefined) this.h *= h;\n\n      const zScale = 1 - (1 - FAR_SCALE) * this.z;\n      matrix.scale(this.matrix, this.w * zScale, this.h * zScale);\n    }\n  }\n\n  updateWithMatrix(m: Matrix, shouldUpdateProps: boolean = false) {\n    matrix.multiply(this.matrix, m);\n\n    if (shouldUpdateProps) {\n      this.updateTransformProps();\n    }\n  }\n\n  // calculates transform properties based on current matrix\n  updateTransformProps() {\n    this.x = this.matrix[6];\n    this.y = this.matrix[7];\n    this.angle = matrix.deriveAngle(this.matrix);\n\n    const cosAngle = Math.cos(this.angle);\n    this.w = this.matrix[0] / cosAngle;\n    this.h = this.matrix[4] / cosAngle;\n  }\n}\n","import { Game } from \"../Game\";\nimport { matrix } from \"../lib/matrix\";\nimport {\n  GameObjectPropsInterface,\n  Point,\n  TransformPropsInterface,\n} from \"../types\";\nimport { Transform } from \"./Transform\";\n\nexport class BaseGameObject {\n  id: number;\n  ctx: CanvasRenderingContext2D;\n  game: Game;\n  parent: BaseGameObject;\n  children: BaseGameObject[] = [];\n  transform: Transform;\n  globalTransform: Transform;\n  points: Point[] = [];\n  layer: number;\n  rendered: boolean = false;\n\n  constructor(props: GameObjectPropsInterface) {\n    Object.assign(this, props);\n    this.transform = new Transform(props);\n    this.updateGlobalTransform();\n  }\n\n  // sets this.points\n  initPoints() {\n    this.points = [];\n  }\n\n  // sets event listeners\n  setListeners() {}\n\n  // remove event listeners\n  removeListeners() {}\n\n  // render and update\n  // write render and update function on classes extended BaseGameObject\n  // _render and _update are used internally by game loop\n  _render() {\n    this.render();\n  }\n  render() {}\n\n  _update(timeDelta: number, time: number) {\n    if (timeDelta < 0) return;\n    this.update(timeDelta, time);\n  }\n  update(timeDelta: number, time: number) {}\n\n  setParent(parent: BaseGameObject) {\n    this.parent = parent;\n    this.updateGlobalTransform();\n  }\n\n  addChildren(children: BaseGameObject[] | BaseGameObject) {\n    if (!Array.isArray(children)) children = [children];\n    for (let child of children) {\n      child.setParent(this);\n      this.children.push(child);\n      if (this.rendered) {\n        this.game.addObject(child);\n      }\n    }\n  }\n\n  removeChild(child: BaseGameObject) {\n    const childIdx = this.children.indexOf(child);\n    if (childIdx > 0) this.children.splice(childIdx, 1);\n  }\n\n  // base destroy method\n  _destroy() {\n    this.rendered = false;\n    this.game.removeObject(this);\n    if (this.parent) {\n      this.parent.removeChild(this);\n    }\n  }\n  destroy() {\n    this._destroy();\n  }\n\n  updateTransformWithProps(props: TransformPropsInterface) {\n    this.transform.updateWithProps(props);\n    this.updateGlobalTransform();\n  }\n\n  setTransformWithProps(props: TransformPropsInterface) {\n    this.transform.setTransformWithProps(props);\n    this.updateGlobalTransform();\n  }\n\n  // updates transformation matrix relative to whole canvas\n  // and children's as well\n  updateGlobalTransform() {\n    this.globalTransform = new Transform();\n    this.globalTransform.updateWithProps(this.transform.getTransformProps());\n\n    if (this.parent) {\n      // TODO: update translation w/ z\n      // update global transform w/ parent's global transform\n      const parentGlobalMat = this.parent.globalTransform.getMatrix();\n      const parentGlobalProps = this.parent.globalTransform.getTransformProps();\n      this.globalTransform.updateWithProps(parentGlobalProps);\n\n      const { x, y, z } = this.transform.getTransformProps();\n      const newTranslateX =\n        parentGlobalMat[0] * x + parentGlobalMat[3] * y + parentGlobalProps.x;\n      const newTranslateY =\n        parentGlobalMat[1] * x + parentGlobalMat[4] * y + parentGlobalProps.y;\n      this.globalTransform.setTransformWithProps({\n        x: newTranslateX,\n        y: newTranslateY,\n        z,\n      });\n    }\n\n    // and children's matrices\n    for (let child of this.children) child.updateGlobalTransform();\n  }\n\n  normalizePoints(relX: number, relY: number): Point {\n    return {\n      x: this.ctx.canvas.width * (relX + 0.5),\n      y: this.ctx.canvas.height * (relY + 0.5),\n    };\n  }\n\n  localLineTo(localX: number, localY: number) {\n    const resolved: Point = matrix.transformPoint(\n      this.globalTransform.getMatrix(),\n      localX,\n      localY\n    );\n    const normalized: Point = this.normalizePoints(resolved.x, resolved.y);\n    this.ctx.lineTo(normalized.x, normalized.y);\n  }\n\n  localMoveTo(localX: number, localY: number) {\n    const resolved: Point = matrix.transformPoint(\n      this.globalTransform.getMatrix(),\n      localX,\n      localY\n    );\n    const normalized: Point = this.normalizePoints(resolved.x, resolved.y);\n    this.ctx.moveTo(normalized.x, normalized.y);\n  }\n\n  setLayer(layer) {\n    this.layer = layer;\n  }\n\n  setRenderedState(state: boolean) {\n    this.rendered = state;\n  }\n}\n","import { Point } from \"../types\";\n\nconst _circleMemo = {};\nexport function circle(segments) {\n  if (!_circleMemo[segments]) {\n    const segmentAngle: number = (2 * Math.PI) / segments;\n    const pts = [];\n    for (let i = 0; i < segments; i++) {\n      const angle = segmentAngle * i;\n      pts.push({\n        x: 0.5 * Math.cos(angle),\n        y: 0.5 * Math.sin(angle),\n      });\n    }\n    _circleMemo[segments] = pts;\n  }\n  return _circleMemo[segments]; //.slice()\n}\n\nconst _squareMemo = {};\nexport function square(segments) {\n  if (!_squareMemo[segments]) {\n    const pts = [];\n    // draw points from top-right to bottom-right to bottom-left to top-left and back\n    const segQtrNum = Math.floor(segments / 4);\n    for (let i = 0; i < segments; i++) {\n      switch (Math.floor((4 * i) / segments)) {\n        // from top-right to bottom-right\n        case 0:\n          pts.push({\n            x: 0.5,\n            y: -0.5 + i / segQtrNum,\n          });\n          break;\n        // from bottom-right to bottom-left\n        case 1:\n          pts.push({\n            x: 0.5 - (i - segQtrNum) / segQtrNum,\n            y: 0.5,\n          });\n          break;\n        // from bottom-left to top-left\n        case 2:\n          pts.push({\n            x: -0.5,\n            y: 0.5 - (i - 2 * segQtrNum) / segQtrNum,\n          });\n          break;\n        // from top-left to top-right\n        case 3:\n          pts.push({\n            x: -0.5 + (i - 3 * segQtrNum) / segQtrNum,\n            y: -0.5,\n          });\n      }\n    }\n    _squareMemo[segments] = pts;\n  }\n  return _squareMemo[segments];\n}\n\nconst DOT_SIZE = 0.005;\nexport function farDot(center: Point): Point[] {\n  const diamondPts = circle(4);\n  return diamondPts.map((pt) => {\n    return {\n      x: DOT_SIZE * pt.x + center.x,\n      y: DOT_SIZE * pt.y + center.y,\n    };\n  });\n}\n","import { TransformPropsInterface, Point, VoidFunction } from \"../types\";\n\n// math utils\nexport function findPointBetweenPoints(\n  start: Point,\n  end: Point,\n  k: number\n): Point {\n  const dx = end.x - start.x;\n  const dy = end.y - start.y;\n\n  return {\n    x: start.x + dx * k,\n    y: start.y + dy * k,\n  };\n}\n\nexport function calcMidpoints(points: Point[], loops: boolean): Point[] {\n  const midpoints = [];\n  for (let i = 0; i < points.length - 1; i++) {\n    midpoints.push(findPointBetweenPoints(points[i], points[i + 1], 0.5));\n  }\n\n  if (loops)\n    midpoints.push(\n      findPointBetweenPoints(points[points.length - 1], points[0], 0.5)\n    );\n\n  return midpoints;\n}\n\nexport function rotate(x, y, angle): Point {\n  const cos = Math.cos(angle);\n  const sin = Math.sin(angle);\n\n  let newX = x * cos - y * sin;\n  let newY = x * sin + y * cos;\n\n  return {\n    x: newX,\n    y: newY,\n  };\n}\n\nexport function calcAngle(x, y): number {\n  let angle = Math.atan(y / x);\n  // adjust angles in Quadrant III and IV\n  if (x < 0) {\n    angle += Math.PI;\n  }\n  return angle;\n}\n\n// time utils\nexport function throttle(fn: VoidFunction, time: number): VoidFunction {\n  let lastTime: number;\n  return function (...args) {\n    if (!lastTime || Date.now() > lastTime + time) {\n      fn(...args);\n      lastTime = Date.now();\n    }\n  };\n}\n\nexport function debounce(fn: VoidFunction, wait: number): VoidFunction {\n  let timeout = null;\n  return function (...args) {\n    if (timeout) {\n      clearTimeout(timeout);\n    }\n    timeout = setTimeout(function () {\n      fn(...args);\n      timeout = null;\n    }, wait);\n  };\n}\n\n// time in terms of ms\nexport function sleep(time: number): Promise<void> {\n  return new Promise((resolve) => {\n    setTimeout(resolve, time);\n  });\n}\n","import { BaseGameObject } from \"./BaseGameObject\";\nimport {\n  GameObjectInterface,\n  GameObjectPropsInterface,\n  Point,\n  Traveler,\n} from \"../types\";\nimport { COLORS, BULLET_SPEED, COLLISION_TOLERANCE } from \"../CONSTS\";\nimport { circle } from \"../lib/shapes\";\nimport { findPointBetweenPoints } from \"../lib/utils\";\nimport { Level } from \"./Level\";\nimport { Enemy } from \"./Enemy\";\n\ninterface BulletPropsInterface extends GameObjectPropsInterface, Traveler {\n  laneIdx: number;\n  level: Level;\n}\n\nexport class Bullet extends BaseGameObject implements GameObjectInterface {\n  speed: number = BULLET_SPEED;\n  color: string = COLORS.PLAYER;\n  laneIdx: number;\n  level: Level;\n  points: Point[];\n  to: Point;\n  from: Point;\n\n  constructor(props: BulletPropsInterface) {\n    super(props);\n    this.initPoints();\n  }\n\n  initPoints() {\n    this.points = circle(4);\n  }\n\n  update(timeDelta: number) {\n    const { z } = this.transform.getTransformProps();\n    const newZ = z + timeDelta * BULLET_SPEED;\n\n    const newPoint = findPointBetweenPoints(this.to, this.from, newZ);\n    this.setTransformWithProps({ z: newZ, ...newPoint });\n  }\n\n  render() {\n    this.ctx.fillStyle = this.color;\n    this.ctx.beginPath();\n    this.points.forEach(({ x, y }, i) => {\n      i === 0 ? this.localMoveTo(x, y) : this.localLineTo(x, y);\n    });\n    this.ctx.closePath();\n    this.ctx.fill();\n  }\n}\n","import { BaseGameObject } from \"./BaseGameObject\";\nimport { GameObjectInterface, GameObjectPropsInterface } from \"../types\";\nimport { COLORS } from \"../CONSTS\";\nimport { Bullet } from \"./Bullet\";\nimport { Level } from \"./Level\";\nimport { throttle } from \"../lib/utils\";\n\ninterface PlayerPropsInterface extends GameObjectPropsInterface {\n  color?: string;\n}\n\nexport class Player extends BaseGameObject implements GameObjectInterface {\n  level: Level;\n  color: string;\n  fireBullet: Function;\n  isFiring: boolean;\n\n  constructor(props: PlayerPropsInterface) {\n    super(props);\n    if (!this.color) {\n      this.color = COLORS.PLAYER;\n    }\n    this.keydown = this.keydown.bind(this);\n    this.keyup = this.keyup.bind(this);\n    this.enableFiring = this.enableFiring.bind(this);\n    this.disableFiring = this.disableFiring.bind(this);\n    this.fireBullet = throttle(this._fireBullet.bind(this), 150);\n  }\n\n  _fireBullet() {\n    const bulletTf = this.level.getBulletPath();\n    const laneIdx = this.level.getPlayerSpotIdx();\n    const bullet = new Bullet({\n      game: this.game,\n      ctx: this.ctx,\n      level: this.level,\n      laneIdx,\n      parent: this.parent,\n      ...bulletTf.to,\n      ...bulletTf,\n      w: 0.05,\n      h: 0.05,\n    });\n    this.level.addBullet(bullet, laneIdx);\n    this.game.addObject(bullet, this.layer);\n  }\n\n  keydown(e) {\n    if (e.code === \"Space\") {\n      this.enableFiring();\n    }\n  }\n\n  keyup(e) {\n    if (e.code === \"Space\") {\n      this.disableFiring();\n    }\n  }\n\n  enableFiring() {\n    this.isFiring = true;\n  }\n\n  disableFiring() {\n    this.isFiring = false;\n  }\n\n  setListeners() {\n    window.addEventListener(\"keydown\", this.keydown, true);\n    window.addEventListener(\"keyup\", this.keyup, true);\n    this.ctx.canvas.addEventListener(\"mousedown\", this.enableFiring, true);\n    this.ctx.canvas.addEventListener(\"mouseup\", this.disableFiring, true);\n  }\n\n  removeListeners() {\n    window.removeEventListener(\"keydown\", this.keydown, true);\n    window.removeEventListener(\"keyup\", this.keyup, true);\n    this.ctx.canvas.removeEventListener(\"mousedown\", this.enableFiring, true);\n    this.ctx.canvas.removeEventListener(\"mouseup\", this.disableFiring, true);\n  }\n\n  update() {\n    if (this.isFiring) this.fireBullet();\n  }\n\n  render() {\n    this.ctx.strokeStyle = this.color;\n    this.ctx.beginPath();\n    this.localMoveTo(-0.25, -0.25);\n    this.localLineTo(-0.5, 0);\n    this.localLineTo(0, 0.3);\n    this.localLineTo(0.5, 0);\n    this.localLineTo(0.25, -0.25);\n    this.localLineTo(0.4, 0);\n    this.localLineTo(0, 0.1);\n    this.localLineTo(-0.4, 0);\n    this.ctx.closePath();\n    this.ctx.stroke();\n  }\n\n  setLevel(level) {\n    this.level = level;\n  }\n}\n","import { GameObjectPropsInterface, VoidFunction } from \"./types\";\nimport { BaseGameObject } from \"./objects/BaseGameObject\";\nimport { Level } from \"./objects/Level\";\nimport { Player } from \"./objects/Player\";\nimport { debounce } from \"./lib/utils\";\nimport { COLORS, MAX_ID } from \"./CONSTS\";\nimport { Enemy } from \"./objects/Enemy\";\nimport { RedEnemy } from \"./objects/RedEnemy\";\nimport { EnemySpawner } from \"./objects/EnemySpawner\";\n\ninterface State {\n  sceneType: SceneType;\n  levelState?: LevelState;\n  levelIdx?: number;\n}\n\ninterface Layer {\n  [id: string]: BaseGameObject;\n}\n\nclass LayerCollection {\n  private layers: Layer[] = [];\n  // id mapped to serialized string: \"layerIdx, objIdxInLayer\"\n  private objIdMap = {};\n\n  addObject(obj: BaseGameObject, layerIdx: number = 0) {\n    // object already added\n    if (this.objIdMap[obj.id]) return;\n\n    if (this.layers[layerIdx]) {\n      this.layers[layerIdx][obj.id] = obj;\n    } else {\n      this.layers[layerIdx] = { [obj.id]: obj };\n    }\n    this.objIdMap[obj.id] = layerIdx;\n  }\n\n  removeObject(obj: BaseGameObject) {\n    if (this.objIdMap[obj.id] !== undefined) {\n      const layerIdx = this.objIdMap[obj.id];\n      delete this.objIdMap[obj.id];\n      delete this.layers[layerIdx][obj.id];\n    }\n  }\n\n  // apply function to all objects in layer collection, in order\n  applyFn(fn: Function, filterFn?: Function) {\n    for (let i = 0; i < this.layers.length; i++) {\n      const layer = this.layers[i];\n      Object.values(layer).forEach((obj) => {\n        if (!filterFn || filterFn(obj)) fn(obj);\n      });\n    }\n  }\n}\n\ninterface LevelState {\n  idx: number;\n  // TODO: enemy state\n}\n\ninterface GamePropsInterface {\n  canvas: HTMLCanvasElement;\n  ctx: CanvasRenderingContext2D;\n  levels: typeof Level[];\n  state?: State;\n}\n\n// scene types\nexport enum SceneType {\n  LEVEL = \"LEVEL\",\n  TITLE = \"TITLE\",\n  WIN = \"WIN\",\n  GAME_OVER = \"GAME_OVER\",\n}\n\nexport class Game {\n  canvas: HTMLCanvasElement;\n  ctx: CanvasRenderingContext2D;\n  levels: typeof Level[];\n  state: State;\n  player: Player;\n\n  private layerCollection: LayerCollection;\n  private canvasRect: DOMRect;\n  private running = true;\n  private currLevel: Level;\n  private objId = -1;\n  private lastTime: number;\n\n  constructor({\n    canvas,\n    ctx,\n    levels,\n    state = {\n      /* \n    sceneType: SceneType.TITLE\n    */\n      sceneType: SceneType.LEVEL,\n      levelState: {\n        idx: 0,\n      },\n    },\n  }: GamePropsInterface) {\n    this.canvas = canvas;\n    this.ctx = ctx;\n    this.state = state;\n    this.levels = levels;\n  }\n\n  start() {\n    // create player\n    this.player = new Player(this.getDefaultProps());\n\n    // cache canvas rect\n    this.canvasRect = this.canvas.getBoundingClientRect();\n    this.startScene();\n\n    this.setListeners();\n\n    this.lastTime = Date.now();\n    requestAnimationFrame(this.gameLoop.bind(this));\n  }\n\n  startScene() {\n    // clear layers\n    this.layerCollection = new LayerCollection();\n\n    switch (this.state.sceneType) {\n      case SceneType.LEVEL:\n        this.startLevel();\n        break;\n    }\n  }\n\n  startLevel() {\n    const { idx } = this.state.levelState;\n\n    this.currLevel = new this.levels[idx]({\n      ...this.getDefaultProps(),\n      x: 0,\n      y: 0,\n      w: 0.65,\n      h: 0.65,\n    });\n\n    this.addObject(this.currLevel, 0);\n\n    this.currLevel.initPlayerSpots();\n    this.currLevel.setPlayer(this.player);\n    this.currLevel.startSpawning();\n  }\n\n  addObject(obj: BaseGameObject, layer: number = 0) {\n    if (obj.id === undefined) obj.id = this.getNewObjId();\n\n    obj.setRenderedState(true);\n    this.layerCollection.addObject(obj, layer);\n    obj.initPoints();\n    obj.setListeners();\n    obj.setLayer(layer);\n\n    for (let child of obj.children) {\n      this.addObject(child, layer);\n    }\n  }\n\n  removeObject(obj) {\n    this.layerCollection.removeObject(obj);\n    obj.removeListeners();\n\n    for (let child of obj.children) {\n      this.removeObject(child);\n    }\n  }\n\n  // listeners\n  handleMouse(e: MouseEvent) {\n    if (!this.currLevel) return;\n    this.currLevel.startUpdatingWithCursor(\n      e.clientX - this.canvasRect.x,\n      e.clientY - this.canvasRect.y\n    );\n  }\n\n  handleMouseLeave() {\n    if (!this.currLevel) return;\n    this.currLevel.stopUpdatingWithCursor();\n  }\n\n  setListeners() {\n    this.canvas.addEventListener(\"mouseenter\", this.handleMouse.bind(this));\n    this.canvas.addEventListener(\"mousemove\", this.handleMouse.bind(this));\n    this.canvas.addEventListener(\n      \"mouseleave\",\n      this.handleMouseLeave.bind(this)\n    );\n\n    const resizeHandler: VoidFunction = debounce(function () {\n      // recache canvas rect\n      this.canvasRect = this.canvas.getBoundingClientRect();\n    }, 200);\n    window.addEventListener(\"resize\", resizeHandler);\n  }\n\n  gameLoop(time) {\n    if (this.running) {\n      // skip first cycle to initialize lastTime\n      if (!this.lastTime) {\n        this.lastTime = time;\n      } else {\n        const timeDelta = time - this.lastTime;\n        this.lastTime = time;\n        this.draw(timeDelta, time);\n      }\n      requestAnimationFrame(this.gameLoop.bind(this));\n    }\n  }\n\n  draw(timeDelta: number, time: number) {\n    this.ctx.fillStyle = COLORS.BG;\n    this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\n\n    this.layerCollection.applyFn((obj: BaseGameObject) => {\n      obj._update(timeDelta, time);\n      obj._render();\n    });\n  }\n\n  updateState(newState: State) {\n    let updateScene = newState.sceneType !== this.state.sceneType;\n    this.state = newState;\n\n    if (updateScene) {\n      this.startScene();\n    }\n  }\n\n  // util for getting default Game Object props\n  getDefaultProps(): GameObjectPropsInterface {\n    return {\n      game: this,\n      ctx: this.ctx,\n      id: this.getNewObjId(),\n    };\n  }\n\n  getNewObjId() {\n    if (this.objId < MAX_ID) {\n      this.objId += 1;\n    } else {\n      this.objId = 0;\n    }\n    return this.objId;\n  }\n}\n","export class Queue<T> {\n  first: QueueNode<T> = null;\n  last: QueueNode<T> = null;\n\n  constructor(initItems: T | T[]) {\n    if (initItems) {\n      this.enqueue(initItems);\n    }\n  }\n\n  enqueue(item: T | T[]): void {\n    if (!Array.isArray(item)) item = [item];\n\n    item.forEach((_item) => {\n      const newNode = new QueueNode<T>(_item);\n      if (!this.first) {\n        this.first = this.last = newNode;\n      } else {\n        this.last.next = newNode;\n        this.last = newNode;\n      }\n    });\n  }\n\n  dequeue(): T {\n    const dequeued = this.first;\n    if (this.first === this.last) {\n      this.first = this.last = null;\n    } else {\n      this.first = this.first.next;\n    }\n    return dequeued.item;\n  }\n\n  getFirst(): T {\n    return this.first && this.first.item;\n  }\n}\n\nclass QueueNode<T> {\n  item: T;\n  next: QueueNode<T>;\n\n  constructor(item) {\n    this.item = item;\n  }\n}\n","import { BaseGameObject } from \"./BaseGameObject\";\nimport { GameObjectInterface, GameObjectPropsInterface, Point } from \"../types\";\nimport { LEVEL_CENTER } from \"../CONSTS\";\nimport { Level } from \"./Level\";\nimport { findPointBetweenPoints } from \"../lib/utils\";\nimport { farDot } from \"../lib/shapes\";\n\nexport class Enemy extends BaseGameObject implements GameObjectInterface {\n  level: Level;\n  points: Point[];\n  to: Point;\n  from: Point;\n  color: string;\n\n  constructor(props: GameObjectPropsInterface) {\n    super(props);\n  }\n\n  updatePath(to: Point, from: Point) {\n    this.to = to;\n    this.from = from;\n  }\n\n  setLevel(level: Level) {\n    this.level = level;\n  }\n\n  calcFarPoint(): Point {\n    // range from 0.2 to 0.8\n    const distAwayFromLine = 0.8 - 0.6 * Math.min(1, this.transform.z - 1);\n    return {\n      x: LEVEL_CENTER.x + (this.to.x - LEVEL_CENTER.x) * distAwayFromLine,\n      y: LEVEL_CENTER.y + (this.to.y - LEVEL_CENTER.y) * distAwayFromLine,\n    };\n  }\n\n  render() {\n    this.ctx.strokeStyle = this.color;\n    this.ctx.beginPath();\n    // render far shape\n    if (this.transform.z > 1) {\n      const farPoints = farDot(this.calcFarPoint());\n      farPoints.forEach(({ x, y }, i) => {\n        i === 0 ? this.level.localMoveTo(x, y) : this.level.localLineTo(x, y);\n      });\n    } else {\n      this.points.forEach(({ x, y }, i) => {\n        i === 0 ? this.localMoveTo(x, y) : this.localLineTo(x, y);\n      });\n    }\n    this.ctx.closePath();\n    this.ctx.stroke();\n  }\n}\n","import { BaseGameObject } from \"./BaseGameObject\";\nimport { GameObjectInterface, GameObjectPropsInterface, Point } from \"../types\";\nimport { COLORS, BULLET_SPEED, RED_ENEMY_SPEED } from \"../CONSTS\";\nimport { Level } from \"./Level\";\nimport { Enemy } from \"./Enemy\";\nimport { findPointBetweenPoints } from \"../lib/utils\";\n\nexport class RedEnemy extends Enemy {\n  color: string = COLORS.RED;\n  speed: number = RED_ENEMY_SPEED;\n  level: Level;\n  points: Point[];\n  to: Point;\n  from: Point;\n\n  constructor(props: GameObjectPropsInterface) {\n    super(props);\n  }\n\n  initPoints() {\n    this.points = [\n      // left edge\n      { x: -0.5, y: -0.25 },\n      { x: -0.25, y: 0 },\n      { x: -0.5, y: 0.25 },\n      // right edge\n      { x: 0.5, y: -0.25 },\n      { x: 0.25, y: 0 },\n      { x: 0.5, y: 0.25 },\n    ];\n  }\n\n  update(timeDelta: number) {\n    const { z } = this.transform.getTransformProps();\n    // console.log(\"tf z\", this.transform.z);\n    // console.log(\"z\", z);\n    const newZ = z - timeDelta * this.speed;\n\n    if (newZ < 0) {\n      this.destroy();\n      return;\n    }\n\n    const newPoint = findPointBetweenPoints(this.from, this.to, newZ);\n    this.setTransformWithProps({ z: newZ, ...newPoint });\n  }\n}\n","import { sleep } from \"../lib/utils\";\nimport { GameObjectPropsInterface } from \"../types\";\nimport { BaseGameObject } from \"./BaseGameObject\";\nimport { Enemy } from \"./Enemy\";\nimport { Level } from \"./Level\";\nimport { RedEnemy } from \"./RedEnemy\";\n\ninterface EnemySpawnerPropsInterface extends GameObjectPropsInterface {\n  level: Level;\n  enemyClasses: typeof Enemy[];\n  startingZ?: number;\n  zIncrement?: number;\n}\n\nexport class EnemySpawner extends BaseGameObject {\n  static enemySizeMap: Map<typeof Enemy, number> = new Map<\n    typeof Enemy,\n    number\n  >([[RedEnemy, 0.65]]);\n  // z that nearest enemy will start with\n  startingZ: number = 1.1;\n  // z distance subsequent enemies start at\n  zIncrement: number = 0.1;\n\n  level: Level;\n  enemyClasses: typeof Enemy[];\n\n  constructor(props: EnemySpawnerPropsInterface) {\n    super(props);\n\n    const { startingZ, zIncrement } = props;\n    if (startingZ) this.startingZ = startingZ;\n    if (zIncrement) this.zIncrement = zIncrement;\n  }\n\n  spawnEnemies() {\n    this.enemyClasses.forEach((enemyClass, i) => {\n      const size = EnemySpawner.enemySizeMap.get(enemyClass);\n      const newEnemy = new enemyClass({\n        ...this.game.getDefaultProps(),\n        w: size,\n        h: size,\n        z: this.startingZ + this.zIncrement * i,\n      });\n      this.level.addEnemy(newEnemy);\n    });\n  }\n}\n","import {\n  GameObjectPropsInterface,\n  TransformPropsInterface,\n  Point,\n} from \"../types\";\nimport { BaseGameObject } from \"./BaseGameObject\";\nimport { Player } from \"./Player\";\nimport { calcAngle, calcMidpoints, throttle } from \"../lib/utils\";\nimport {\n  LEVEL_CENTER,\n  FAR_SCALE,\n  COLORS,\n  ENEMY_TO_LEVEL_SIZE,\n  COLLISION_TOLERANCE,\n  AVG_FRAME_TIME,\n  BULLET_SPEED,\n  BULLET_TOLERANCE,\n} from \"../CONSTS\";\nimport { Enemy } from \"./Enemy\";\nimport { Bullet } from \"./Bullet\";\nimport { Queue } from \"../lib/Queue\";\nimport { EnemySpawner } from \"./EnemySpawner\";\n\nexport interface LevelSpot extends TransformPropsInterface {}\n\nexport interface LevelPropsInterface extends GameObjectPropsInterface {\n  loops?: boolean;\n}\n\ninterface EnemyStateMap {\n  [id: string]: EnemyState;\n}\n\ninterface EnemyLaneMap {\n  [laneIdx: string]: Queue<Enemy>;\n}\n\ninterface BulletLaneMap {\n  [laneIdx: string]: Queue<Bullet>;\n}\n\ninterface EnemyState {\n  enemy: Enemy;\n  spotIdx: number;\n}\n\nexport class Level extends BaseGameObject {\n  playerSpots: LevelSpot[] = [];\n  bulletSpots: LevelSpot[] = [];\n  player: Player;\n  enemySpawner: EnemySpawner;\n  enemyClasses: typeof Enemy[] = [];\n  enemyStateMap: EnemyStateMap = {};\n  // maps lane indices to enemies in lane\n  enemyLaneMap: EnemyLaneMap = {};\n  // maps lane indices to bullets in lane\n  bulletLaneMap: BulletLaneMap = {};\n  playerSpotIdx: number = 0;\n  targetSpotIdx: number = 0;\n  updatingSpot: boolean = false;\n  loops: boolean = true;\n  throttledUpdateSpot: Function;\n  // Level-specific points\n  farPoints: Point[] = [];\n  midpoints: Point[] = [];\n  farMidpoints: Point[] = [];\n\n  constructor(props: LevelPropsInterface) {\n    super(props);\n    const { loops } = props;\n    if (loops !== undefined) this.loops = loops;\n    this.throttledUpdateSpot = throttle(this.updatePlayerSpot.bind(this), 50);\n  }\n\n  startSpawning() {\n    this.enemySpawner = new EnemySpawner({\n      ...this.game.getDefaultProps(),\n      level: this,\n      enemyClasses: this.enemyClasses,\n    });\n    this.enemySpawner.spawnEnemies();\n  }\n\n  setPlayer(player: Player) {\n    this.player = player;\n    player.updateTransformWithProps(this.playerSpots[this.playerSpotIdx]);\n    this.player.setLevel(this);\n    this.addChildren(player);\n  }\n\n  addEnemy(enemy: Enemy) {\n    if (this.enemyStateMap[enemy.id]) return;\n\n    const spotIdx = Math.floor(this.farMidpoints.length * Math.random());\n\n    // store references to enemy\n    this.enemyStateMap[enemy.id] = {\n      enemy,\n      spotIdx,\n    };\n    if (this.enemyLaneMap[spotIdx]) {\n      this.enemyLaneMap[spotIdx].enqueue(enemy);\n    } else {\n      this.enemyLaneMap[spotIdx] = new Queue<Enemy>(enemy);\n    }\n\n    this.addChildren(enemy);\n\n    const fromPoint = this.farMidpoints[spotIdx];\n    const toPoint = this.midpoints[spotIdx];\n    enemy.setTransformWithProps({\n      ...fromPoint,\n      w: ENEMY_TO_LEVEL_SIZE,\n      h: ENEMY_TO_LEVEL_SIZE,\n      angle: Math.PI / 2 - calcAngle(toPoint.x, toPoint.y),\n    });\n    enemy.updatePath(fromPoint, this.midpoints[spotIdx]);\n    enemy.setLevel(this);\n  }\n\n  // clear enemy references\n  removeEnemy(enemy: Enemy) {\n    const { spotIdx } = this.enemyStateMap[enemy.id];\n    delete this.enemyLaneMap[spotIdx][enemy.id];\n    delete this.enemyStateMap[enemy.id];\n    enemy.destroy();\n  }\n\n  addBullet(bullet: Bullet, laneIdx: number) {\n    if (this.bulletLaneMap[laneIdx]) {\n      this.bulletLaneMap[laneIdx].enqueue(bullet);\n    } else {\n      this.bulletLaneMap[laneIdx] = new Queue<Bullet>(bullet);\n    }\n  }\n\n  // TODO:\n  moveEnemy(enemy: Enemy, spotDiff: number) {}\n\n  // to be overwritten by Level classes\n  getLevelPoints(): Point[] {\n    return [];\n  }\n\n  // sets points\n  initPoints() {\n    this.points = this.getLevelPoints();\n    this.farPoints = this.points.map(({ x, y }) => {\n      const { x: bx, y: by } = LEVEL_CENTER;\n      return {\n        x: bx + x * FAR_SCALE,\n        y: by + y * FAR_SCALE,\n      };\n    });\n\n    // also calculate midpoints\n    this.midpoints = calcMidpoints(this.points, this.loops);\n    this.farMidpoints = calcMidpoints(this.farPoints, this.loops);\n  }\n\n  // sets player spots based on points\n  initPlayerSpots() {\n    this.playerSpots = [];\n  }\n\n  // get bullet path at player's position\n  getBulletPath(): { to: Point; from: Point } {\n    return {\n      to: this.midpoints[this.playerSpotIdx],\n      from: this.farMidpoints[this.playerSpotIdx],\n    };\n  }\n\n  getPlayerSpotIdx() {\n    return this.playerSpotIdx;\n  }\n\n  _render() {\n    this.renderLevelPoints(this.points);\n    this.renderLevelPoints(this.farPoints);\n\n    // render lines b/w near and far points\n    for (let i = 0; i < this.points.length; i++) {\n      const nearPt = this.points[i];\n      const farPt = this.farPoints[i];\n      const highlight =\n        this.playerSpotIdx === i ||\n        this.playerSpotIdx + 1 === i ||\n        // handle loop\n        (this.loops &&\n          this.playerSpotIdx === this.points.length - 1 &&\n          i === 0);\n      const color = highlight ? COLORS.PLAYER : COLORS.LINE;\n\n      this.ctx.strokeStyle = color;\n      this.ctx.beginPath();\n      this.localMoveTo(nearPt.x, nearPt.y);\n      this.localLineTo(farPt.x, farPt.y);\n      this.ctx.closePath();\n      this.ctx.stroke();\n    }\n  }\n\n  renderLevelPoints(points: Point[]) {\n    this.ctx.beginPath();\n    this.ctx.strokeStyle = COLORS.LINE;\n    points.forEach(({ x, y }, i) => {\n      i === 0 ? this.localMoveTo(x, y) : this.localLineTo(x, y);\n    });\n    this.loops && this.ctx.closePath();\n    this.ctx.stroke();\n  }\n\n  update() {\n    this.throttledUpdateSpot();\n\n    // check for collisions\n    this.checkCollisions();\n\n    // check for any bullets that need to be destroyed\n    this.cleanBullets();\n  }\n\n  checkCollisions() {\n    Object.keys(this.enemyLaneMap).forEach((laneIdx) => {\n      const enemyLaneQueue = this.enemyLaneMap[laneIdx];\n      const bulletLaneQueue = this.bulletLaneMap[laneIdx];\n\n      if (!bulletLaneQueue) return;\n\n      const firstEnemy = enemyLaneQueue.getFirst();\n      const firstBullet = bulletLaneQueue.getFirst();\n      const collides =\n        firstEnemy &&\n        firstBullet &&\n        firstBullet.transform.z < 1 &&\n        firstBullet.transform.z + BULLET_TOLERANCE >= firstEnemy.transform.z;\n\n      if (collides) {\n        bulletLaneQueue.dequeue();\n        enemyLaneQueue.dequeue();\n        this.removeEnemy(firstEnemy);\n        firstBullet.destroy();\n      }\n    });\n  }\n\n  cleanBullets() {\n    Object.keys(this.bulletLaneMap).forEach((laneIdx) => {\n      const q = this.bulletLaneMap[laneIdx];\n\n      while (q.getFirst() && q.getFirst().transform.z + BULLET_TOLERANCE > 1) {\n        const bullet = q.dequeue();\n        bullet.destroy();\n      }\n    });\n  }\n\n  // updates player position based on its spot index\n  updatePlayerSpot() {\n    if (\n      !this.updatingSpot ||\n      !this.player ||\n      this.playerSpotIdx === this.targetSpotIdx ||\n      // don't update if doesn't loop and have hit ends\n      (!this.loops &&\n        (this.targetSpotIdx < 0 ||\n          this.targetSpotIdx >= this.playerSpots.length))\n    )\n      return;\n\n    // look for fastest path if loops\n    const forwardTarget =\n      this.targetSpotIdx < this.playerSpotIdx\n        ? this.playerSpots.length + this.targetSpotIdx\n        : this.targetSpotIdx;\n    const forwardPath = forwardTarget - this.playerSpotIdx;\n\n    const backwardTarget =\n      this.targetSpotIdx > this.playerSpotIdx\n        ? this.targetSpotIdx - this.playerSpots.length\n        : this.targetSpotIdx;\n    const backwardPath = backwardTarget - this.playerSpotIdx;\n\n    // increment by 1 space in best direction\n    if (Math.abs(forwardPath) < Math.abs(backwardPath)) {\n      this.playerSpotIdx += 1;\n      if (this.playerSpotIdx >= this.playerSpots.length) this.playerSpotIdx = 0;\n    } else {\n      this.playerSpotIdx -= 1;\n      if (this.playerSpotIdx < 0)\n        this.playerSpotIdx = this.playerSpots.length - 1;\n    }\n\n    this.player.setTransformWithProps(this.playerSpots[this.playerSpotIdx]);\n  }\n\n  startUpdatingWithCursor(x: number, y: number) {\n    this.updatingSpot = true;\n  }\n\n  stopUpdatingWithCursor() {\n    this.updatingSpot = false;\n  }\n}\n","import { GameObjectInterface, Point } from \"../types\";\nimport { PLAYER_TO_LEVEL_DIST, PLAYER_TO_LEVEL_SIZE } from \"../CONSTS\";\nimport { Level, LevelSpot, LevelPropsInterface } from \"./Level\";\nimport { Enemy } from \"./Enemy\";\nimport { RedEnemy } from \"./RedEnemy\";\nimport { circle } from \"../lib/shapes\";\nimport { calcAngle } from \"../lib/utils\";\n\ninterface CirclePropsInterface extends LevelPropsInterface {\n  segments?: number;\n}\n\ninterface SegmentsMemo {\n  [key: string]: Point[];\n}\n\nexport class Circle extends Level implements GameObjectInterface {\n  props: CirclePropsInterface;\n  rotationSpeed: number = Math.PI / 2000; // per ms\n  segments: number = 16;\n  enemyClasses: typeof Enemy[] = new Array(10).fill(RedEnemy);\n  static pointsMemo: SegmentsMemo = {};\n\n  constructor(props: CirclePropsInterface) {\n    super(props);\n  }\n\n  getLevelPoints(): Point[] {\n    return circle(this.segments);\n  }\n\n  initPlayerSpots() {\n    const pts = this.points;\n    const spots: LevelSpot[] = [];\n    for (let i = 0; i < pts.length; i++) {\n      const j = i === pts.length - 1 ? 0 : i + 1;\n      const p_i = pts[i];\n      const p_j = pts[j];\n\n      // average b/w two points\n      const avg_x = (p_i.x + p_j.x) / 2;\n      const avg_y = (p_i.y + p_j.y) / 2;\n      const segAngle = (2 * Math.PI) / this.segments;\n      const normalAngle = segAngle * (0.5 + i);\n      const angle = Math.PI / 2 - normalAngle;\n\n      const x = avg_x + PLAYER_TO_LEVEL_DIST * Math.cos(normalAngle);\n      const y = avg_y + PLAYER_TO_LEVEL_DIST * Math.sin(normalAngle);\n\n      spots.push({\n        x,\n        y,\n        w: PLAYER_TO_LEVEL_SIZE,\n        h: PLAYER_TO_LEVEL_SIZE,\n        angle,\n      });\n    }\n    this.playerSpots = spots;\n  }\n\n  startUpdatingWithCursor(x: number, y: number) {\n    this.updatingSpot = true;\n    const normX = x / this.ctx.canvas.width - 0.5;\n    const normY = y / this.ctx.canvas.height - 0.5;\n\n    const angle = calcAngle(normX, normY);\n    const segmentAngle = (2 * Math.PI) / this.segments;\n    let idx = Math.floor(angle / segmentAngle);\n    if (idx < 0) idx += this.segments;\n    this.targetSpotIdx = idx;\n  }\n}\n","import { GameObjectInterface, Point } from \"../types\";\nimport { PLAYER_TO_LEVEL_DIST, PLAYER_TO_LEVEL_SIZE } from \"../CONSTS\";\nimport { Level, LevelSpot, LevelPropsInterface } from \"./Level\";\nimport { Enemy } from \"./Enemy\";\nimport { RedEnemy } from \"./RedEnemy\";\nimport { square } from \"../lib/shapes\";\nimport { calcAngle } from \"../lib/utils\";\n\ninterface SquarePropsInterface extends LevelPropsInterface {\n  segments?: number;\n}\n\ninterface SegmentsMemo {\n  [key: string]: Point[];\n}\n\nexport class Square extends Level implements GameObjectInterface {\n  props: SquarePropsInterface;\n  segments: number = 16;\n  enemyClasses: typeof Enemy[] = new Array(20).fill(RedEnemy);\n  static pointsMemo: SegmentsMemo = {};\n\n  constructor(props: SquarePropsInterface) {\n    super(props);\n  }\n\n  getLevelPoints(): Point[] {\n    return square(this.segments);\n  }\n\n  initPlayerSpots() {\n    const pts = this.points;\n    const spots: LevelSpot[] = [];\n    for (let i = 0; i < pts.length; i++) {\n      const j = i === pts.length - 1 ? 0 : i + 1;\n      const p_i = pts[i];\n      const p_j = pts[j];\n\n      // average b/w two points\n      let x = (p_i.x + p_j.x) / 2;\n      let y = (p_i.y + p_j.y) / 2;\n      let angle;\n\n      // choose angle based on side\n      switch (Math.floor((4 * i) / this.segments)) {\n        // from top-right to bottom-right\n        case 0:\n          x += PLAYER_TO_LEVEL_DIST;\n          angle = Math.PI / 2;\n          break;\n        // from bottom-right to bottom-left\n        case 1:\n          y += PLAYER_TO_LEVEL_DIST;\n          angle = 0;\n          break;\n        // from bottom-left to top-left\n        case 2:\n          x -= PLAYER_TO_LEVEL_DIST;\n          angle = -Math.PI / 2;\n          break;\n        // from top-left to top-right\n        case 3:\n          y -= PLAYER_TO_LEVEL_DIST;\n          angle = Math.PI;\n      }\n\n      spots.push({\n        x,\n        y,\n        w: PLAYER_TO_LEVEL_SIZE,\n        h: PLAYER_TO_LEVEL_SIZE,\n        angle,\n      });\n    }\n    this.playerSpots = spots;\n  }\n\n  startUpdatingWithCursor(x: number, y: number) {\n    this.updatingSpot = true;\n    const normX = x / this.ctx.canvas.width - 0.5;\n    const normY = y / this.ctx.canvas.height - 0.5;\n\n    // since spots start at top-right, shift angle by 45 deg CCW\n    const angle = calcAngle(normX, normY) + Math.PI / 4;\n    const segmentAngle = (2 * Math.PI) / this.segments;\n    let idx = Math.floor(angle / segmentAngle);\n    if (idx < 0) idx += this.segments;\n    this.targetSpotIdx = idx;\n  }\n}\n","import { Game } from \"./Game\";\nimport { Circle } from \"./objects/Circle\";\nimport { Square } from \"./objects/Square\";\n\nlet game: Game, canvas: HTMLCanvasElement, ctx: CanvasRenderingContext2D;\n\nfunction main() {\n  canvas = document.getElementById(\"game\") as HTMLCanvasElement;\n  ctx = canvas.getContext(\"2d\");\n\n  game = new Game({\n    canvas,\n    ctx,\n    levels: [Circle, Square],\n  });\n\n  game.start();\n}\nmain();\n"]}